#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env —Ñ–∞–π–ª–∞
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
from dotenv import load_dotenv
import sys

def validate_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:")
        print("   cp .env.example .env")
        return False
    
    load_dotenv()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("-" * 40)
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    required_vars = {
        'MEXC_API_KEY': 'API –∫–ª—é—á MEXC',
        'MEXC_SECRET_KEY': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á MEXC'
    }
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            errors.append(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
        elif value in ['your_mexc_api_key_here', 'your_mexc_secret_key_here']:
            errors.append(f"‚ùå {var} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            print(f"‚úÖ {var}: {'*' * 8}{value[-4:]} ({description})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    optional_vars = {
        'SANDBOX_MODE': ('true', '–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã'),
        'RISK_PER_TRADE': ('0.02', '–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É'),
        'STOP_LOSS_PCT': ('0.05', 'Stop-Loss %'),
        'TAKE_PROFIT_PCT': ('0.10', 'Take-Profit %'),
        'TRADING_PAIRS': ('BTC/USDT,ETH/USDT', '–¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã')
    }
    
    for var, (default, description) in optional_vars.items():
        value = os.getenv(var, default)
        print(f"üìã {var}: {value} ({description})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    numeric_vars = ['RISK_PER_TRADE', 'STOP_LOSS_PCT', 'TAKE_PROFIT_PCT']
    for var in numeric_vars:
        try:
            value = float(os.getenv(var, '0'))
            if value <= 0 or value > 1:
                warnings.append(f"‚ö†Ô∏è  {var} = {value} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.01-0.20)")
        except ValueError:
            errors.append(f"‚ùå {var} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä
    pairs = os.getenv('TRADING_PAIRS', '').split(',')
    valid_pairs = [pair.strip() for pair in pairs if '/' in pair]
    if len(valid_pairs) == 0:
        errors.append("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã")
    else:
        print(f"üìà –¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã: {len(valid_pairs)} —à—Ç.")
    
    print("-" * 40)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if errors:
        print("üö® –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        for error in errors:
            print(f"   {error}")
        print()
    
    if warnings:
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   {warning}")
        print()
    
    if not errors:
        sandbox_status = "SANDBOX" if os.getenv('SANDBOX_MODE', 'true').lower() == 'true' else "LIVE"
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –†–µ–∂–∏–º: {sandbox_status}")
        return True
    else:
        print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
        return False

if __name__ == "__main__":
    if validate_env_file():
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!")
        sys.exit(0)
    else:
        sys.exit(1)